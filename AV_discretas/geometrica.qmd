---
title: "Distribución Geométrica"
lang: es
---

```{=html}
<style>
main.content {
text-align: justify}
</style>
```

```{r}
#| label: setup
#| include: false

library(tidyverse)
library(kableExtra)
library(gridExtra)
```

La **distribución geométrica** modela el número de ensayos independientes de Bernoulli necesarios antes de obtener el primer éxito. Es fundamental para analizar tiempos de espera y procesos que involucran la búsqueda del primer evento exitoso.

:::::::: {#def-geometrica}
Una variable aleatoria $X$ sigue una distribución geométrica si representa el número de ensayos necesarios antes de obtener el primer éxito en una secuencia de ensayos independientes de Bernoulli. Si la probabilidad de éxito en cada ensayo es $p$, entonces la función de masa de probabilidad (pmf) está dada por:

$$f(x)= p(1-p)^x \quad \text{para } x =0,  1, 2, 3, \ldots$$

Una variable aleatoria $X$ que tiene distribución geométrica será denotada como $X \sim \text{geo}(p)$.

## Características de la Distribución Geométrica

**Parámetros**

-   $p$: probabilidad de éxito en cada ensayo, donde $0 < p \leq 1$

**Función de Distribución**

\begin{equation}
F(x) = \sum_{u\leq x} f(u) = \begin{cases}
0 & \text{si } x < 0 \\
1-(1-p)^{k+1} & \text{si } k \leq x \leq k+1; \quad k=0,1, \dots 
\end{cases}
\end{equation}

**Parámetros Estadísticos**

Esperanza (Media): $$E(X) = \frac{1-p}{p}$$

Varianza: $$\text{Var}(X) = \frac{1-p}{p^2}$$

Desviación Estándar: $$\sigma = \sqrt{\frac{1-p}{p^2}} = \frac{\sqrt{1-p}}{p}$$

## Ejemplo Básico

::: {#exm-geom_1}
Lanzamiento de monedas - Búsqueda de la primera cara. Consideramos una moneda justa ($p=0.5$), y queremos modelar el número de lanzamientos hasta antes de obtener la primera cara.

```{r}
#| label: moneda-geometrica
# Parámetro
p_cara <- 0.5

# Calcular probabilidades para los primeros 11 ensayos
k_moneda <- 0:10
prob_geometrica <- dgeom(k_moneda , p_cara)  

# Crear tabla
geometrica_moneda <- data.frame(
  Ensayo = k_moneda,
  Probabilidad = prob_geometrica,
  Prob_Acumulada = pgeom(k_moneda, p_cara)
)

kable(geometrica_moneda, 
      caption = "Distribución Geométrica - Primera cara (p = 0.5)",
      digits = 4,
      col.names = c("Ensayo", "P(X = x)", "P(X ≤ x)")) %>%
  kable_styling(bootstrap_options = "striped")

# Parámetros estadísticos
media_moneda <- (1-p_cara) / p_cara
varianza_moneda <- (1 - p_cara) / (p_cara^2)
desv_std_moneda <- sqrt(varianza_moneda)


cat("Media (ensayos esperados):", media_moneda, "\n")
cat("Varianza:", varianza_moneda, "\n")
cat("Desviación estándar:", round(desv_std_moneda, 4), "\n")

```

**Visualización**

```{r}
#| label: grafico-geometrica-basico
#| fig-cap: "Distribución Geométrica - Primera cara en lanzamiento de moneda"
ggplot(geometrica_moneda, aes(x = Ensayo, y = Probabilidad)) +
  geom_col(fill = "steelblue", alpha = 0.7, width = 0.8) +
  geom_text(aes(label = round(Probabilidad, 3)), vjust = -0.5, size = 3) +
  geom_vline(xintercept = media_moneda, color = "red", linetype = "dashed", linewidth = 1) +
  annotate("text", x = media_moneda + 1.5, y = max(prob_geometrica) * 0.8, 
           label = paste("E[X] =", media_moneda), color = "red") +
  scale_x_continuous(breaks = k_moneda) +
  labs(title = paste("Distribución Geométrica(", p_cara, ")"),
       subtitle = "Número de lanzamientos antes de obtener la primera cara",
       x = "Número de Ensayos",
       y = "Probabilidad") +
  theme_minimal() +
  theme(plot.title = element_text(hjust = 0.5),
        plot.subtitle = element_text(hjust = 0.5))
```
:::

## Comparación: Efecto del parámetro

A continuación exploramos cómo varía la distribución geométrica al cambiar el parámetro $p$.

```{r}
#| label: diferentes-p
# Diferentes probabilidades de éxito
p_values <- c(0.1, 0.3, 0.5, 0.7, 0.9)
k_max <- 15

# Crear data frame para comparación
geometrica_comp <- data.frame()
for(p in p_values) {
  k_vals <- 0:k_max
  probs <- dgeom(k_vals, p)  
  
  temp_data <- data.frame(
    p_label = paste("p =", p),
    k = k_vals,
    probabilidad = probs,
    media = (1-p)/p,
    varianza = (1-p)/(p^2)
  )
  geometrica_comp <- rbind(geometrica_comp, temp_data)
}

# Tabla de parámetros
parametros_comp <- data.frame(
  p = p_values,
  Media = (1-p_values)/p_values,
  Varianza = (1-p_values)/(p_values^2),
  Desv_Std = sqrt((1-p_values)/(p_values^2))
)

kable(parametros_comp, 
      caption = "Parámetros de la distribución geométrica para diferentes valores de p",
      digits = 4,
      col.names = c("p", "Media", "Varianza", "Desv. Std")) |> 
  kable_styling(bootstrap_options = "striped")
```

```{r}
#| label: grafico-diferentes-p
#| fig-cap: "Distribución Geométrica para diferentes valores de p"
# Filtrar para mejor visualización
geometrica_filtered <- geometrica_comp[geometrica_comp$probabilidad > 0.005, ]

ggplot(geometrica_filtered, aes(x = k, y = probabilidad, color = p_label)) +
  geom_line(size = 1, alpha = 0.8) +
  geom_point(size = 2) +
  facet_wrap(~p_label, scales = "free") +
  labs(title = "Distribución Geométrica para diferentes valores de p",
       x = "Número de Ensayos",
       y = "Probabilidad",
       color = "Parámetro") +
  theme_minimal() +
  theme(plot.title = element_text(hjust = 0.5),
        legend.position = "none")
```

## Propiedades Importantes

### Propiedad de Pérdida de Memoria

Sea $X\sim geo(p)$ Entonces para cualesquiera enteros $s, t \geq 0$ se cumple la propiedad de pérdida de memoria:

$$P(X \geq s + t | X \geq s) = P(X \geq t)$$

**Verificación Numérica**

Consideremos una variable aleatoria geométrica con $p=0.3$, y verifiquemos la propiedad para $s=5$ y $t=3$.

```{r}
#| label: falta-memoria
# Demostración de la propiedad de falta de memoria
p_mem <- 0.3
s <- 5
t <- 3

# P(X >= s + t)
prob_s_t <- 1 - pgeom(s + t-1, p_mem)  

# P(X >= s) 
prob_s <- 1- pgeom(s-1, p_mem)

# P(X >= t) 
prob_t <- 1- pgeom(t-1, p_mem)

# P(X >= s + t | X >= s) = P(X >= s + t) / P(X >= s)
prob_condicional <- prob_s_t / prob_s

cat("Demostración de la Propiedad de Falta de Memoria:\n")
cat("Parámetros: p =", p_mem, ", s =", s, ", t =", t, "\n\n")
cat("P(X  ≥", s+t, ") =", round(prob_s_t, 6), "\n")
cat("P(X  ≥", s, ") =", round(prob_s, 6), "\n")
cat("P(X  ≥", t, ") =", round(prob_t, 6), "\n\n")
cat("P(X  ≥", s+t, "| X  ≥", s, ") =", round(prob_condicional, 6), "\n")
cat("P(X  ≥", t, ") =", round(prob_t, 6), "\n\n")
cat("¿Son iguales?", abs(prob_condicional - prob_t) < 1e-10, "\n")
```

### Función de Supervivencia

La función de supervivencia $S(k)$ representa la probabilidad de que el número de fracasos antes de obtener el primer éxito sea mayor que $k$:

$$S(k) = P(X > k) = (1-p)^{(k+1)}$$

**Visualización de la Función de Supervivencia**

```{r}
#| label: funcion-supervivencia
#| fig-cap: "Función de Supervivencia de la distribución geométrica"
# Diferentes valores de p
p_surv <- c(0.2, 0.4, 0.6, 0.8)
k_surv <- 0:15

# Crear data frame
supervivencia_data <- data.frame()
for(p in p_surv) {
  surv_vals <- (1 - p)^(k_surv+1)
  temp_data <- data.frame(
    p_label = paste("p =", p),
    k = k_surv,
    supervivencia = surv_vals
  )
  supervivencia_data <- rbind(supervivencia_data, temp_data)
}

ggplot(supervivencia_data, aes(x = k, y = supervivencia, color = p_label)) +
  geom_line(size = 1.2) +
  geom_point(size = 2) +
  labs(title = "Función de Supervivencia: P(X > k)",
       x = "k (número de ensayos antes del primer éxito)",
       y = "Probabilidad de Supervivencia",
       color = "Parámetro") +
  theme_minimal() +
  theme(plot.title = element_text(hjust = 0.5),
        legend.position = "bottom")
```

## Ejemplos Aplicados

::: {#exm-geom_calidad}
**Control de Calidad Industrial**

Una máquina produce piezas defectuosas con probabilidad 0.05. ¿Cuántas piezas debemos inspeccionar antes encontrar la primera defectuosa?

```{r}
#| label: control-calidad-geometrica
# Parámetros
p_defecto_geom <- 0.05

# Parámetros estadísticos
media_defecto <- (1-p_defecto_geom) / p_defecto_geom
varianza_defecto <- (1 - p_defecto_geom) / (p_defecto_geom^2)
desv_std_defecto <- sqrt(varianza_defecto)

cat("Control de Calidad - Primera pieza defectuosa:\n")
cat("Probabilidad de defecto por pieza:", p_defecto_geom, "\n")
cat("Número esperado de inspecciones:", media_defecto, "\n")
cat("Desviación estándar:", round(desv_std_defecto, 2), "\n\n")

# Probabilidades específicas
k_calidad <- 0:50
prob_calidad <- dgeom(k_calidad, p_defecto_geom)

# Preguntas de interés
prob_primera_10 <- sum(prob_calidad[1:10])
prob_mas_20 <- 1 - sum(prob_calidad[1:20])
prob_entre_10_30 <- sum(prob_calidad[10:30])

cat("Probabilidades de interés:\n")
cat("P(primera defectuosa en ≤ 10 inspecciones):", round(prob_primera_10, 4), "\n")
cat("P(primera defectuosa en > 20 inspecciones):", round(prob_mas_20, 4), "\n")
cat("P(primera defectuosa entre 10 y 30 inspecciones):", round(prob_entre_10_30, 4), "\n")



# Visualización
calidad_data <- data.frame(
  k = k_calidad[1:40],
  probabilidad = prob_calidad[1:40]
)

ggplot(calidad_data, aes(x = k, y = probabilidad)) +
  geom_col(fill = "darkgreen", alpha = 0.7, width = 0.8) +
  geom_vline(xintercept = media_defecto, color = "red", linetype = "dashed", size = 1) +
  annotate("text", x = media_defecto + 5, y = max(prob_calidad) * 0.8, 
           label = paste("E(X) =", media_defecto), color = "red") +
  labs(title = "Control de Calidad: Primera Pieza Defectuosa",
       subtitle = paste("Geométrica(", p_defecto_geom, ")"),
       x = "Número de Inspecciones",
       y = "Probabilidad") +
  theme_minimal() +
  theme(plot.title = element_text(hjust = 0.5),
        plot.subtitle = element_text(hjust = 0.5))
```
:::

## Simulación: Validación de propiedades teóricas

```{r}
#| label: simulacion-geometrica
set.seed(123)
p_sim <- 0.25
n_sim <- 10000

# Generar datos geométricos 
datos_geom <- rgeom(n_sim, p_sim) 

# Estadísticas observadas
media_obs <- mean(datos_geom)
var_obs <- var(datos_geom)
desv_obs <- sd(datos_geom)

# Valores teóricos
media_teo <- (1-p_sim) / p_sim
var_teo <- (1 - p_sim) / (p_sim^2)
desv_teo <- sqrt(var_teo)

cat("Simulación Geométrica (p =", p_sim, "):\n")
cat("Simulaciones:", n_sim, "\n\n")
cat("Media teórica:", media_teo, "| Media observada:", round(media_obs, 4), "\n")
cat("Varianza teórica:", var_teo, "| Varianza observada:", round(var_obs, 4), "\n")
cat("Desv. Std teórica:", round(desv_teo, 4), "| Desv. Std observada:", round(desv_obs, 4), "\n")

# Comparar distribuciones
freq_obs <- table(datos_geom[datos_geom <= 20]) / n_sim
k_comp <- as.numeric(names(freq_obs))
prob_teo <- dgeom(k_comp, p_sim)

comparacion_sim <- data.frame(
  k = k_comp,
  Freq_Observada = as.numeric(freq_obs),
  Prob_Teorica = prob_teo,
  Diferencia = abs(as.numeric(freq_obs) - prob_teo)
)

kable(head(comparacion_sim, 12), 
      caption = "Comparación frecuencias observadas vs probabilidades teóricas",
      digits = 4,
      col.names = c("k", "Freq. Observada", "Prob. Teórica", "Diferencia")) %>%
  kable_styling(bootstrap_options = "striped")
```

## Ejercicios Propuestos

::: {#exr-geom_1}
Se lanza una moneda hasta obtener la primera cara.

-   

    a)  ¿Cuál es la probabilidad de necesitar exactamente 5 lanzamientos?

-   

    b)  ¿Cuál es la probabilidad de necesitar más de 3 lanzamientos?

-   

    c)  Calcule la media y varianza del número de lanzamientos.

```{r}
p_caras <- 0.5

cat("Distribución Geométrica - Primera cara\n")
cat("Probabilidad de éxito (cara): p =", p_caras, "\n")

# a) Probabilidad de necesitar exactamente 5 lanzamientos
# 5 lanzamientos = 4 fracasos antes del primer éxito
prob_5_lanzamientos <- dgeom(4, p_caras)

cat("a) Probabilidad de necesitar exactamente 5 lanzamientos:\n")
cat("   P(X = 5) =", round(prob_5_lanzamientos, 6), "\n")
cat("   P(X = 5) =", sprintf("%.4f%%", prob_5_lanzamientos * 100), "\n")

# Verificación manual: P(X = 5) = (1-p)^4 * p
prob_5_manual <- (1 - p_caras)^4 * p_caras
cat("   Verificación manual:", round(prob_5_manual, 6), "\n")

# b) Probabilidad de necesitar más de 3 lanzamientos
# Más de 3 lanzamientos = más de 2 fracasos antes del primer éxito
# P(X > 3) = 1 - P(X ≤ 3) = 1 - P(fracasos ≤ 2)
prob_mas_3 <- 1 - pgeom(2, p_caras)

cat("b) Probabilidad de necesitar más de 3 lanzamientos:\n")
cat("   P(X > 3) = 1 - P(X ≤ 3)\n")
cat("   P(X > 3) =", round(prob_mas_3, 6), "\n")
cat("   P(X > 3) =", sprintf("%.4f%%", prob_mas_3 * 100), "\n")

# Verificación alternativa usando propiedad de falta de memoria
prob_mas_3_alt <- (1 - p_caras)^3
cat("   Verificación (propiedad falta de memoria): (1-p)³ =", round(prob_mas_3_alt, 6), "\n")

# c) Media y varianza
# Para número de lanzamientos hasta el primer éxito:
media_lanzamientos <- 1 / p_caras
varianza_lanzamientos <- (1 - p_caras) / (p_caras^2)
desv_std_lanzamientos <- sqrt(varianza_lanzamientos)

cat("c) Parámetros estadísticos:\n")
cat("   Media (lanzamientos esperados): E[X] = 1/p =", media_lanzamientos, "\n")
cat("   Varianza: Var[X] = (1-p)/p² =", varianza_lanzamientos, "\n")
cat("   Desviación estándar:", round(desv_std_lanzamientos, 4), "\n")
cat("   Interpretación: Se espera necesitar", media_lanzamientos, 
    "lanzamientos en promedio para obtener la primera cara\n\n")

# Crear tabla para los primeros lanzamientos
k_lanzamientos <- 1:10
k_fracasos <- k_lanzamientos - 1
prob_geometrica <- dgeom(k_fracasos, p_caras)
prob_acumulada <- pgeom(k_fracasos, p_caras)

geometrica_moneda <- data.frame(
  Lanzamientos = k_lanzamientos,
  Probabilidad = prob_geometrica,
  Prob_Acumulada = prob_acumulada
)

kable(geometrica_moneda, 
      caption = "Distribución Geométrica - Primera cara (p = 0.5)",
      digits = 4,
      col.names = c("Lanzamientos", "P(X = k)", "P(X ≤ k)")) %>%
  kable_styling(bootstrap_options = "striped") %>%
  row_spec(5, bold = TRUE, background = "#FFE082")

# Preparar datos para colorear
geometrica_moneda <- geometrica_moneda %>%
  mutate(
    categoria = case_when(
      Lanzamientos == 5 ~ "Exactamente 5",
      Lanzamientos > 3 ~ "Más de 3",
      TRUE ~ "Otros"
    )
  )

plot_geometrica <- ggplot(geometrica_moneda, aes(x = Lanzamientos, y = Probabilidad, fill = categoria)) +
  geom_col(alpha = 0.8, width = 0.7, color = "black") +
  geom_text(aes(label = round(Probabilidad, 4)), vjust = -0.5, size = 3) +
  geom_vline(xintercept = media_lanzamientos, color = "red", linetype = "dashed", size = 1) +
  annotate("text", x = media_lanzamientos + 1.5, y = max(prob_geometrica) * 0.8, 
           label = paste("E[X] =", media_lanzamientos), color = "red", size = 4, fontface = "bold") +
  scale_fill_manual(values = c("Exactamente 5" = "#E74C3C", 
                                "Más de 3" = "#F39C12",
                                "Otros" = "#3498DB")) +
  scale_x_continuous(breaks = k_lanzamientos) +
  labs(title = paste("Distribución Geométrica (p =", p_caras, ")"),
       subtitle = "Número de lanzamientos hasta obtener la primera cara",
       x = "Número de lanzamientos",
       y = "Probabilidad",
       fill = "Categoría") +
  theme_minimal() +
  theme(plot.title = element_text(hjust = 0.5, face = "bold", size = 14),
        plot.subtitle = element_text(hjust = 0.5),
        legend.position = "bottom")

print(plot_geometrica)

# Resumen de respuestas
tabla_resumen <- data.frame(
  Pregunta = c("a) P(X = 5)", "b) P(X > 3)", "c) Media", "c) Varianza", "c) Desv. Std."),
  Valor = c(prob_5_lanzamientos, prob_mas_3, media_lanzamientos, 
            varianza_lanzamientos, desv_std_lanzamientos)
)

kable(tabla_resumen,
      digits = 4,
      caption = "Resumen de Respuestas",
      col.names = c("Pregunta", "Valor"),
      align = "lr") %>%
  kable_styling(bootstrap_options = c("striped", "hover"))
```


:::

::: {#exr-geom_2}
Un jugador de básquetbol tiene 70% de probabilidad de anotar un tiro libre.

-   

    a)  ¿Cuál es la probabilidad de que anote en el tercer intento por primera vez?

-   

    b)  ¿Cuántos intentos se espera que necesite para anotar?

-   

    c)  ¿Cuál es la probabilidad de necesitar entre 2 y 5 intentos?

```{r}
p_anotacion <- 0.7

cat("Distribución Geométrica - Tiros libres\n")
cat("Probabilidad de anotar: p =", p_anotacion, "\n")

# a) Probabilidad de anotar en el tercer intento por primera vez
# Tercer intento = 2 fracasos antes del primer éxito
prob_tercer_intento <- dgeom(2, p_anotacion)

cat("a) Probabilidad de anotar en el tercer intento por primera vez:\n")
cat("   P(X = 3) =", round(prob_tercer_intento, 6), "\n")
cat("   P(X = 3) =", sprintf("%.4f%%", prob_tercer_intento * 100), "\n")

# Verificación manual: P(X = 3) = (1-p)² * p
prob_tercer_manual <- (1 - p_anotacion)^2 * p_anotacion
cat("   Verificación manual: (1-p)² × p =", round(prob_tercer_manual, 6), "\n")

# b) Intentos esperados para anotar
# E[X] = 1/p
intentos_esperados <- 1 / p_anotacion
varianza <- (1 - p_anotacion) / (p_anotacion^2)
desv_std <- sqrt(varianza)

cat("b) Número de intentos esperados para anotar:\n")
cat("   E[X] = 1/p =", round(intentos_esperados, 4), "intentos\n")
cat("   Varianza:", round(varianza, 4), "\n")
cat("   Desviación estándar:", round(desv_std, 4), "\n")

# c) Probabilidad de necesitar entre 2 y 5 intentos
# P(2 ≤ X ≤ 5) = P(X ≤ 5) - P(X ≤ 1)
# En términos de fracasos: P(1 ≤ fracasos ≤ 4)
prob_entre_2_5 <- pgeom(4, p_anotacion) - pgeom(0, p_anotacion)

cat("c) Probabilidad de necesitar entre 2 y 5 intentos:\n")
cat("   P(2 ≤ X ≤ 5) = P(X ≤ 5) - P(X ≤ 1)\n")
cat("   P(2 ≤ X ≤ 5) =", round(prob_entre_2_5, 6), "\n")
cat("   P(2 ≤ X ≤ 5) =", sprintf("%.4f%%", prob_entre_2_5 * 100), "\n")

# Desglose
cat("   Desglose:\n")
for (intento in 2:5) {
  prob_k <- dgeom(intento - 1, p_anotacion)
  cat(sprintf("   P(X = %d) = %.6f\n", intento, prob_k))
}
cat("\n")

# Tabla de probabilidades
k_intentos <- 1:10
k_fracasos <- k_intentos - 1
prob_geometrica <- dgeom(k_fracasos, p_anotacion)
prob_acumulada <- pgeom(k_fracasos, p_anotacion)

jugador <- data.frame(
  Intentos = k_intentos,
  Probabilidad = prob_geometrica,
  Prob_Acumulada = prob_acumulada
)

kable(jugador, 
      caption = paste("Distribución Geométrica - Tiros libres (p =", p_anotacion, ")"),
      digits = 4,
      col.names = c("Intentos", "P(X = k)", "P(X ≤ k)")) %>%
  kable_styling(bootstrap_options = "striped") %>%
  row_spec(3, bold = TRUE, background = "#FFE082")  # Resaltar tercer intento

# Gráfico
jugador <- jugador %>%
  mutate(
    categoria = case_when(
      Intentos == 3 ~ "Tercer intento",
      Intentos >= 2 & Intentos <= 5 ~ "Entre 2 y 5",
      TRUE ~ "Otros"
    )
  )

plot_jugador <- ggplot(jugador, aes(x = Intentos, y = Probabilidad, fill = categoria)) +
  geom_col(alpha = 0.8, width = 0.7, color = "black") +
  geom_text(aes(label = round(Probabilidad, 4)), vjust = -0.5, size = 3) +
  geom_vline(xintercept = intentos_esperados, color = "red", linetype = "dashed", size = 1.2) +
  annotate("text", x = intentos_esperados + 1, y = max(prob_geometrica) * 0.85, 
           label = paste("E[X] =", round(intentos_esperados, 2)), 
           color = "red", size = 4.5, fontface = "bold") +
  scale_fill_manual(values = c("Tercer intento" = "#E74C3C", 
                                "Entre 2 y 5" = "#F39C12",
                                "Otros" = "#8B3A62")) +
  scale_x_continuous(breaks = k_intentos) +
  labs(title = paste("Distribución Geométrica - Tiros libres (p =", p_anotacion, ")"),
       subtitle = "Número de intentos hasta anotar el primer tiro",
       x = "Número de intentos",
       y = "Probabilidad",
       fill = "Categoría") +
  theme_minimal() +
  theme(plot.title = element_text(hjust = 0.5, face = "bold", size = 14),
        plot.subtitle = element_text(hjust = 0.5),
        legend.position = "bottom")

print(plot_jugador)

# Resumen
tabla_resumen <- data.frame(
  Pregunta = c("a) P(X = 3)", "b) Intentos esperados", "c) P(2 ≤ X ≤ 5)"),
  Valor = c(sprintf("%.6f (%.2f%%)", prob_tercer_intento, prob_tercer_intento * 100),
            sprintf("%.2f intentos", intentos_esperados),
            sprintf("%.6f (%.2f%%)", prob_entre_2_5, prob_entre_2_5 * 100))
)

kable(tabla_resumen,
      caption = "Resumen de Respuestas",
      col.names = c("Pregunta", "Valor"),
      align = "ll") %>%
  kable_styling(bootstrap_options = c("striped", "hover"))
```


:::

::: {#exr-geom_3}
Una máquina tiene probabilidad 0.02 de producir una pieza defectuosa.

-   

    a)  Si se inspeccionan las piezas hasta encontrar la primera defectuosa, ¿cuál es el número esperado de inspecciones?

-   

    b)  ¿Cuál es la probabilidad de que la primera pieza defectuosa aparezca después de la pieza número 100?

-   

    c)  Demuestre la propiedad de falta de memoria para este problema.

```{r}
p_defecto <- 0.02

cat("Control de Calidad - Primera pieza defectuosa\n")
cat("Probabilidad de pieza defectuosa: p =", p_defecto, "\n")

# a) Número esperado de inspecciones
# E[X] = 1/p (número de inspecciones hasta encontrar la primera defectuosa)
inspecciones_esperadas <- 1 / p_defecto
varianza <- (1 - p_defecto) / (p_defecto^2)
desv_std <- sqrt(varianza)

cat("a) Número esperado de inspecciones:\n")
cat("   E[X] = 1/p =", inspecciones_esperadas, "inspecciones\n")
cat("   Varianza:", round(varianza, 2), "\n")
cat("   Desviación estándar:", round(desv_std, 2), "\n")

cat("   Interpretación: Se espera inspeccionar", inspecciones_esperadas, 
    "piezas en promedio antes de encontrar una defectuosa\n")

# b) Probabilidad de que la primera defectuosa aparezca después de la pieza 100
# P(X > 100) = (1-p)^100
# Usando pgeom: P(X > 100) = 1 - P(X ≤ 100) = 1 - P(fracasos ≤ 99)
prob_despues_100 <- 1 - pgeom(99, p_defecto)

cat("b) Probabilidad de que la primera defectuosa aparezca después de la pieza 100:\n")
cat("   P(X > 100) = (1-p)^100\n")
cat("   P(X > 100) =", round(prob_despues_100, 6), "\n")
cat("   P(X > 100) =", sprintf("%.4f%%", prob_despues_100 * 100), "\n")

# Verificación manual
prob_despues_100_manual <- (1 - p_defecto)^100
cat("   Verificación manual: (1-p)^100 =", round(prob_despues_100_manual, 6), "\n")

# c) Demostración de la propiedad de falta de memoria
cat("c) Demostración de la propiedad de falta de memoria:\n")

cat("   La propiedad de falta de memoria establece que:\n")
cat("   P(X > s+t | X > s) = P(X > t)\n")

cat("   Es decir, si ya inspeccionamos s piezas sin encontrar defecto,\n")
cat("   la probabilidad de necesitar t piezas adicionales es la misma\n")
cat("   que al inicio.\n")

# Ejemplo numérico: s = 50, t = 30
s <- 50
t <- 30

# P(X > 80 | X > 50) debería ser igual a P(X > 30)

# Método 1: Condicional
prob_mayor_80 <- (1 - p_defecto)^80
prob_mayor_50 <- (1 - p_defecto)^50
prob_condicional <- prob_mayor_80 / prob_mayor_50

# Método 2: Directo
prob_mayor_30 <- (1 - p_defecto)^30

cat("   Ejemplo: s =", s, ", t =", t, "\n")
cat("   P(X >", s+t, "| X >", s, ") = P(X >", s+t, ") / P(X >", s, ")\n")
cat("                    =", round(prob_mayor_80, 6), "/", round(prob_mayor_50, 6), "\n")
cat("                    =", round(prob_condicional, 6), "\n\n")

cat("   P(X >", t, ") = (1-p)^", t, "\n", sep = "")
cat("            =", round(prob_mayor_30, 6), "\n\n")

diferencia <- abs(prob_condicional - prob_mayor_30)
cat("   Diferencia:", format(diferencia, scientific = TRUE), "\n")
cat("   ¡La propiedad se cumple!\n\n")

# Demostración algebraica
cat("   Demostración algebraica:\n")
cat("   P(X > s+t | X > s) = P(X > s+t AND X > s) / P(X > s)\n")
cat("                      = P(X > s+t) / P(X > s)\n")
cat("                      = (1-p)^(s+t) / (1-p)^s\n")
cat("                      = (1-p)^t\n")
cat("                      = P(X > t) ✓\n\n")

# Tabla de probabilidades
k_inspecciones <- c(1, 10, 20, 30, 50, 75, 100, 150, 200)
k_fracasos <- k_inspecciones - 1
prob_exacto <- dgeom(k_fracasos, p_defecto)
prob_mas_que <- (1 - p_defecto)^k_inspecciones

tabla_prob <- data.frame(
  Inspecciones = k_inspecciones,
  `P(X = k)` = prob_exacto,
  `P(X > k)` = prob_mas_que
)

kable(tabla_prob, 
      caption = "Probabilidades para diferentes números de inspecciones",
      digits = 6,
      col.names = c("Inspecciones (k)", "P(X = k)", "P(X > k)")) %>%
  kable_styling(bootstrap_options = "striped")

# Gráfico
k_vals <- 0:250
prob_vals <- dgeom(k_vals, p_defecto)

calidad_data <- data.frame(
  Inspecciones = k_vals + 1,  # +1 para convertir fracasos a inspecciones
  Probabilidad = prob_vals
) %>%
  mutate(
    categoria = case_when(
      Inspecciones > 100 ~ "Después de 100",
      TRUE ~ "Primeras 100"
    )
  )

plot_calidad <- ggplot(calidad_data, aes(x = Inspecciones, y = Probabilidad, fill = categoria)) +
  geom_col(alpha = 0.7, width = 1) +
  geom_vline(xintercept = inspecciones_esperadas, color = "red", linetype = "dashed", size = 1.2) +
  geom_vline(xintercept = 100, color = "blue", linetype = "dashed", size = 1) +
  annotate("text", x = inspecciones_esperadas + 20, y = max(prob_vals) * 0.9, 
           label = paste("E[X] =", inspecciones_esperadas), 
           color = "red", size = 4.5, fontface = "bold") +
  annotate("text", x = 100 + 20, y = max(prob_vals) * 0.7, 
           label = "Insp. 100", 
           color = "blue", size = 4, fontface = "bold") +
  scale_fill_manual(values = c("Primeras 100" = "#CD1076", "Después de 100" = "#FFC0C8")) +
  labs(title = "Control de Calidad: Primera Pieza Defectuosa",
       subtitle = paste("Distribución Geométrica (p =", p_defecto, ")"),
       x = "Número de Inspecciones",
       y = "Probabilidad",
       fill = "Zona") +
  theme_minimal() +
  theme(plot.title = element_text(hjust = 0.5, face = "bold", size = 14),
        plot.subtitle = element_text(hjust = 0.5),
        legend.position = "bottom")

print(plot_calidad)
```

::::::::
