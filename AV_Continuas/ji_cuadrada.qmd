---
title: "Distribución Ji-cuadrada"
lang: es
---

```{=html}
<style>
main.content {
text-align: justify}
</style>
```

```{r}
#| label: setup
#| echo: false
#| message: false
#| warning: false

library(ggplot2)
library(dplyr)
library(gridExtra)
library(knitr)
library(kableExtra)
library(RColorBrewer)
library(plotly)
library(scales)
library(viridis)

```



La distribución ji-cuadrada (también conocida como chi-cuadrada, denotada como $\chi^2$) es una de las distribuciones de probabilidad continuas más importantes en estadística inferencial. Esta distribución surge en diversos contextos, especialmente en pruebas de bondad de ajuste, pruebas de independencia y en la estimación de varianzas poblacionales.


::: {#def-ji_cuadrada}

Una variable aleatoria continua $X$ sigue una distribución ji-cuadrada con $n$ grados de libertad, denotada como $X \sim \chi^2(n)$, si su función de densidad de probabilidad está dada por:

\begin{equation}
f(x) = \begin{cases}
\frac{1}{\Gamma(n/2)} \left(\frac{1}{2}\right)^{n/2} x^{n/2-1} e^{-x/2} & \text{si } x > 0 \\
0 & \text{en otro caso}
\end{cases}
\end{equation}

donde:

- $x > 0$ es el dominio de la variable aleatoria
- $n > 0$ es el parámetro de grados de libertad
- $\Gamma(n/2)$ es la función gamma evaluada en $n/2$

:::



**El Parámetro: Grados de Libertad (n)**

El único parámetro de la distribución ji-cuadrada es **n**, conocido como los **grados de libertad**. Este parámetro tiene las siguientes características:

- **Dominio**: $n > 0$ (puede ser cualquier número real positivo)
- **Interpretación práctica**: Aunque $n$ puede ser cualquier real positivo, en aplicaciones estadísticas típicamente representa un número entero positivo
- **Símbolo**: Se denota comúnmente como $n$, $\nu$ (nu), o $df$ (degrees of freedom)

**Interpretación de los Grados de Libertad**

Los grados de libertad representan el **número de variables aleatorias independientes** que se suman para formar la distribución ji-cuadrada. Específicamente:

Si $Z_1, Z_2, \ldots, Z_n$ son variables aleatorias independientes e idénticamente distribuidas según una distribución normal estándar $N(0,1)$, entonces:

$$X = Z_1^2 + Z_2^2 + \cdots + Z_n^2 \sim \chi^2(n)$$

Posteriormente verificaremos esta propiedad por medio de una simulación numérica.



## Propiedades de la Función de Densidad de Probabilidad (PDF)


Como se indicó previamente, la función de densidad de probabilidad de la distribución ji-cuadrada con $n$ grados de libertad está definida como:

\begin{equation}
f(x; n) = \begin{cases}
\frac{1}{\Gamma(n/2)} \left(\frac{1}{2}\right)^{n/2} x^{n/2-1} e^{-x/2} & \text{si } x > 0 \\
0 & \text{en otro caso}
\end{cases}
\end{equation}


**Propiedades Fundamentales**

La distribución $\chi^2$ tiene **dominio** estrictamente positivo: $x \in (0, \infty)$. Esta característica surge naturalmente de su construcción como suma de cuadrados de variables aleatorias normales estándar independientes. Esta función toma valores no negativos en su **imagen**: $f(x) \in [0, \infty)$.

### Efecto del Parámetro n en la Distribución

El valor de los grados de libertad $n$ tiene el siguiente efecto en la forma de la distribución:

- **Forma de la distribución**: 

  - Para $n = 1$: Forma de "J" invertida (asimetría extrema hacia la derecha)
  - Para $n = 2$: Distribución exponencial
  - Para $n > 2$: Distribución unimodal con sesgo hacia la derecha
  - Para $n$ grande: Se aproxima a una distribución normal


**Comportamiento en los extremos**

El comportamiento de la PDF en los extremos depende crucialmente del parámetro n:

- **Límite en $x \to 0$**:

  - Para n = 1: $\lim_{x \to 0} f(x) = \infty$
  - Para n = 2: $f(0) = 0.5$
  - Para n > 2: $\lim_{x \to 0} f(x) = 0$

**Límite en $x \to \infty$**: Para todos los valores de n, $\lim_{x \to \infty} f(x) = 0$ debido al factor exponencial $e^{-x/2}$

### Visualización de la PDF para Diferentes Valores de n

```{r}
#| label: pdf-variacion-n
#| fig-cap: "Función de densidad de probabilidad ji-cuadrada para diferentes grados de libertad"

# Definir valores enteros de n y rango de x
n_valores <- c(1, 2, 3, 4, 5, 6, 8, 10, 12, 15)
x_rango <- seq(0.01, 25, length.out = 1000)

# Crear dataframe con todas las combinaciones
df_pdf <- expand.grid(x = x_rango, n = n_valores) |> 
  mutate(
    densidad = dchisq(x, df = n),
    n_factor = factor(n, levels = n_valores, labels = paste("n =", n_valores))
  )

# Gráfico principal con todas las curvas
graf_param <- ggplot(df_pdf, aes(x = x, y = densidad, color = n_factor)) +
  geom_line(linewidth=1.2)+
  scale_color_viridis_d(name = "Grados de\nLibertad") +
  xlim(0, 25) + 
  ylim(0, 0.5) +
  labs(
    title = "Familia de Distribuciones Ji-cuadrada",
    x = "x",
    y = "f(x)"
  )+ 
   theme_minimal() + 
   theme(
         plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
         plot.subtitle = element_text(hjust = 0.5, size = 12),
         axis.title = element_text(size = 12)
         )

ggplotly(graf_param)
```


**Análisis de casos particulares**

```{r}
#| label: casos-especiales
#| warning: false
#| fig-cap: "Casos especiales: n = 1, 2, 3, 4"

# Casos especiales con análisis detallado
x_especial <- seq(0.01, 12, length.out = 500)

p_casos <- ggplot() +
  geom_function(fun = function(x) dchisq(x, df = 1), 
                aes(color = "n = 1 (J invertida)"), 
                xlim = c(0.01, 12), size = 1.4) +
  geom_function(fun = function(x) dchisq(x, df = 2), 
                aes(color = "n = 2 (Exponencial)"), 
                xlim = c(0.01, 12), size = 1.4) +
  geom_function(fun = function(x) dchisq(x, df = 3), 
                aes(color = "n = 3 (Unimodal)"), 
                xlim = c(0.01, 12), size = 1.4) +
  geom_function(fun = function(x) dchisq(x, df = 4), 
                aes(color = "n = 4 (Moda = 2)"), 
                xlim = c(0.01, 12), size = 1.4) +
  scale_color_manual(
    values = c("#e31a1c", "#1f78b4", "#33a02c", "#ff7f00"),
    name = "Casos\nEspeciales"
  ) +
  xlim(0, 10) + ylim(0, 0.6) +
  labs(
    title = "Casos Especiales de la Distribución Ji-cuadrada",
    subtitle = "Formas características para valores pequeños de n",
    x = "x", y = "f(x)"
  ) +
  # Anotar características específicas
  annotate("text", x = 5, y = 0.55, 
           label = "n = 1: lím[x→0⁺] f(x) = ∞", 
           color = "#e31a1c", size = 3.5, hjust = 0) +
  annotate("text", x = 5, y = 0.5, 
           label = "n = 2: f(x) = 0.5·e^(-x/2)", 
           color = "#1f78b4", size = 3.5, hjust = 0) +
  annotate("text", x = 5, y = 0.45, 
           label = "n = 3: Moda en x = 1", 
           color = "#33a02c", size = 3.5, hjust = 0) +
  annotate("text", x = 5, y = 0.4, 
           label = "n = 4: Moda en x = 2", 
           color = "#ff7f00", size = 3.5, hjust = 0)+
   theme_minimal() + 
   theme(
         plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
         plot.subtitle = element_text(hjust = 0.5, size = 12),
         axis.title = element_text(size = 12)
         )

print(p_casos)
```

**Interpretación**

**$n=1$**: La distribución presenta forma de "J invertida", monótonamente decreciente. Es la más sesgada de la familia, con varianza máxima relativa a la media.

**$n = 2$**: Adopta forma exponencial $f(x) = \frac{1}{2}e^{-x/2}$. Es el único caso donde la función alcanza un valor finito en el origen.

**$n\geq 3$**: Desarrolla forma unimodal con moda en $x = n - 2$. La distribución se vuelve progresivamente más simétrica conforme aumenta n.


### Aproximación normal para $n$ grandes

Conforme aumentan los grados de libertad, la distribución ji-cuadrada converge hacia una distribución normal con parámetros $\mu = n$ y $\sigma^2 = 2n$. Esta aproximación es prácticamente útil para $n \geq 30$.

```{r}
#| label: aproximacion-normal
#| echo: true
#| fig-cap: "Aproximación a la distribución normal para grados de libertad grandes"

# Comparación con aproximación normal
n_grandes <- c(10, 20, 30, 50)

# Crear subgráficos para cada valor de n
plots_normal <- list()

for (i in seq_along(n_grandes)) {
  n_val <- n_grandes[i]
  
  plots_normal[[i]] <- ggplot() +
    geom_function(fun = function(x) dchisq(x, df = n_val), 
                  aes(color = "Ji-cuadrada"), 
                  xlim = c(max(0, n_val - 4*sqrt(2*n_val)), n_val + 4*sqrt(2*n_val)),
                  size = 1.3) +
    geom_function(fun = function(x) dnorm(x, mean = n_val, sd = sqrt(2*n_val)), 
                  aes(color = "Normal"), 
                  xlim = c(max(0, n_val - 4*sqrt(2*n_val)), n_val + 4*sqrt(2*n_val)),
                  size = 1.3, linetype = "dashed") +
    scale_color_manual(
      values = c("Ji-cuadrada" = "#d62728", "Normal" = "#2ca02c"),
      name = "Distribución"
    ) +
    xlim(max(0, n_val - 4*sqrt(2*n_val)), n_val + 4*sqrt(2*n_val)) +
    labs(
      title = paste("n =", n_val),
      x = "x", y = "f(x)"
    ) +
    theme_minimal() + 
   theme(
         plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
         plot.subtitle = element_text(hjust = 0.5, size = 12),
         axis.title = element_text(size = 12)
         )
}

# Combinar todos los gráficos
grid.arrange(grobs = plots_normal, ncol = 2, 
             top = "Aproximación Normal: χ²(n) ≈ N(n, 2n)")
```

**Criterios de aproximación**

La aproximación normal es considerada adecuada cuando:

- **$n\geq 30$**: Aproximación general aceptable
- **$n\geq 50$**: Aproximación muy precisa
- **$n\geq 100$**: Prácticamente indistinguible de la normal


### Aditividad

Una propiedad fundamental de la distribución ji-cuadrada es la **aditividad**: si $X_1 \sim \chi^2(n_1)$ y $X_2 \sim \chi^2(n_2)$ son independientes, entonces:

$$X_1 + X_2 \sim \chi^2(n_1 + n_2)$$

Esta propiedad refleja directamente el concepto de grados de libertad como componentes independientes.

### Relaciones con Otras Distribuciones

La distribución ji-cuadrada mantiene relaciones importantes con otras distribuciones:

- **Distribución Gamma**: $\chi^2(n) \equiv \text{Gamma}(n/2, 1/2)$
- **Distribución Normal**: Para n grande, $\chi^2(n) \approx N(n, 2n)$
- **Distribución Exponencial**: $\chi^2(2) \equiv \text{Exponencial}(1/2)$



## Propiedades de la CDF

La función de distribución acumulativa de la distribución ji-cuadrada con $n$ grados de libertad está definida como:

\begin{equation}
F(x) = \frac{1}{\Gamma(n/2)} \int_0^{x}\left(\frac{1}{2}\right)^{n/2} u^{n/2-1} e^{-u/2} du \quad \text{para } x > 0
\end{equation}




**Propiedades Generales**

La CDF ji-cuadrada satisface todas las propiedades de una función de distribución válida:

**Monotonicidad**: $F(x)$ es no decreciente, es decir, si $x_1 < x_2$, entonces $F(x_1) \leq F(x_2)$.

**Límites**: $\lim_{x \to -\infty} F(x) = 0$ y $\lim_{x \to \infty} F(x) = 1$.

**Continuidad por la derecha**: $F(x)$ es continua por la derecha en todos los puntos.

**Dominio específico**: Para $x \leq 0$, $F(x) = 0$, ya que la distribución ji-cuadrada solo toma valores positivos.

**Comportamiento en los extremos.** El comportamiento de la CDF en los extremos proporciona información valiosa sobre las características de la distribución:

- **Para $x \to 0$**: $F(x) \to 0$, independientemente del valor de $n$
- **Para $x \to \infty$**: $F(x) \to 1$, convergencia que es más rápida para valores pequeños de $n$
- **En $x = 0$**: $F(0) = 0$ exactamente

```{r}
#| label: cdf-propiedades-basicas
#| fig-cap: "CDF ji-cuadrada para diferentes grados de libertad"

# Visualización de la CDF para diferentes valores de n
n_valores <- c(1, 2, 3, 5, 8, 12, 15, 20)

# Crear el gráfico usando geom_function
p_cdf_basico <- ggplot() +
  geom_function(fun = function(x) pchisq(x, df = 1), 
                aes(color = "n = 1"), size = 1.3, xlim = c(0, 25)) +
  geom_function(fun = function(x) pchisq(x, df = 2), 
                aes(color = "n = 2"), size = 1.3, xlim = c(0, 25)) +
  geom_function(fun = function(x) pchisq(x, df = 3), 
                aes(color = "n = 3"), size = 1.3, xlim = c(0, 25)) +
  geom_function(fun = function(x) pchisq(x, df = 5), 
                aes(color = "n = 5"), size = 1.3, xlim = c(0, 25)) +
  geom_function(fun = function(x) pchisq(x, df = 8), 
                aes(color = "n = 8"), size = 1.3, xlim = c(0, 25)) +
  geom_function(fun = function(x) pchisq(x, df = 12), 
                aes(color = "n = 12"), size = 1.3, xlim = c(0, 25)) +
  geom_function(fun = function(x) pchisq(x, df = 15), 
                aes(color = "n = 15"), size = 1.3, xlim = c(0, 25)) +
  geom_function(fun = function(x) pchisq(x, df = 20), 
                aes(color = "n = 20"), size = 1.3, xlim = c(0, 25)) +
  scale_color_viridis_d(
    name = "Grados de\nLibertad",
    limits = paste("n =", c(1, 2, 3, 5, 8, 12, 15, 20))
  ) +
  xlim(0, 25) + ylim(0, 1) +
  labs(
    title = "Función de Distribución Acumulativa Ji-cuadrada",
    x = "x", y = "F(x)"
  ) +
  geom_hline(yintercept = c(0.5, 0.95), linetype = "dashed", alpha = 0.6) +
  annotate("text", x = 22, y = 0.52, label = "P = 0.5", size = 4) +
  annotate("text", x = 22, y = 0.97, label = "P = 0.95", size = 4)+
  theme_minimal() + 
  theme(
    plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
    plot.subtitle = element_text(hjust = 0.5, size = 12),
    axis.title = element_text(size = 12),
    legend.position = "right",
    panel.grid.minor = element_blank()
    )

ggplotly(p_cdf_basico)
```

### Análisis por Grados de Libertad


```{r}
#| label: casos-especiales-cdf
#| fig-cap: "Comportamiento especial de la CDF para n = 1,2,3,4"

# Análisis detallado de casos especiales
p_especiales <- ggplot() +
  geom_function(fun = function(x) pchisq(x, df = 1), 
                aes(color = "n = 1"), size = 1.5, xlim = c(0, 10)) +
  geom_function(fun = function(x) pchisq(x, df = 2), 
                aes(color = "n = 2"), size = 1.5, xlim = c(0, 10)) +
  geom_function(fun = function(x) pchisq(x, df = 3), 
                aes(color = "n = 3"), size = 1.5, xlim = c(0, 10)) +
  geom_function(fun = function(x) pchisq(x, df = 4), 
                aes(color = "n = 4"), size = 1.5, xlim = c(0, 10)) +
  scale_color_manual(
    name = "Grados de\nLibertad",
    values = c("n = 1" = "#e31a1c", "n = 2" = "#1f78b4", 
               "n = 3" = "#33a02c", "n = 4" = "#ff7f00"),
    breaks = c("n = 1", "n = 2", "n = 3", "n = 4")
  ) +
  xlim(0, 10) + ylim(0, 1) +
  labs(
    title = "Casos Especiales de la CDF Ji-cuadrada",
    subtitle = "Comportamiento para valores pequeños de n",
    x = "x", y = "F(x)"
  ) +
  geom_hline(yintercept = 0.5, linetype = "dashed", alpha = 0.6) +
  geom_vline(xintercept = c(1, 2, 3, 4), linetype = "dotted", alpha = 0.4)+
  theme_minimal() + 
  theme(
    plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
    plot.subtitle = element_text(hjust = 0.5, size = 12),
    axis.title = element_text(size = 12),
    legend.position = "right",
    panel.grid.minor = element_blank()
    )

print(p_especiales)
```


**Interpretación de casos especiales**

**n = 1**: La CDF crece rápidamente desde 0, reflejando la alta concentración de probabilidad cerca del origen que caracteriza la distribución con forma "J invertida".

**n = 2**: Presenta un crecimiento más suave, correspondiente a la distribución exponencial. La probabilidad $P(X \leq 2) = 1 - e^{-1} \approx 0.632$.

**n ≥ 3**: La CDF muestra una forma sigmoidal más pronunciada, con un punto de inflexión que se desplaza hacia la derecha conforme aumenta $n$.


## Relación entre PDF y CDF


La relación entre la función de densidad de probabilidad (PDF) y la función de distribución acumulativa (CDF) está dada por:

$$F'(x) = f(x) \quad \text{y} \quad F(x) = \int_{-\infty}^x f(u) du$$

Para la distribución ji-cuadrada:
$$F(x) = \int_0^x f(u) du = \int_0^x \frac{1}{\Gamma(n/2)} \left(\frac{1}{2}\right)^{n/2} u^{n/2-1} e^{-u/2} du$$

```{r}
#| label: pdf-cdf-relacion
#| fig-cap: "Relación entre PDF y CDF para n = 5"

# Mostrar la relación entre PDF y CDF
n_ejemplo <- 5
x_rango <- seq(0, 15, length.out = 200)
coef <- 0.5  # Factor de escala para la CDF

# Crear datos para sombreado del área bajo la curva
x_area <- seq(0, 8, length.out = 100)
df_area <- data.frame(
  x = x_area,
  y = dchisq(x_area, df = n_ejemplo)
)

p_relacion <- ggplot() +
  stat_function(fun = function(x) dchisq(x, df = n_ejemplo), geom = "area", fill = "lightblue", xlim = c(0, 8)) +
  geom_function(fun = function(x) dchisq(x, df = n_ejemplo), 
                aes(color = "PDF f(x)"), size = 1.4, xlim = c(0, 15)) +
  geom_function(fun = function(x) coef * pchisq(x, df = n_ejemplo), 
                aes(color = "CDF F(x) × 0.5"), size = 1.4, xlim = c(0, 15)) +
  geom_vline(xintercept = 8, linetype = "dashed", color = "red", alpha = 0.8) +
  annotate("label", x = 9, y = 0.2, label = paste("F(8)=P(X ≤ 8)=", round(pchisq(8, n_ejemplo), 3)), color = "black", size = 4.1)+
  scale_color_manual(
    name = "Función",
    values = c("PDF f(x)" = "#d62728", "CDF F(x) × 0.5" = "#1f77b4"),
    breaks = c("PDF f(x)", "CDF F(x)")
  ) +
  xlim(0, 15) + ylim(0, 1.1) +
  labs(
    title = "Relación entre PDF y CDF (n = 5)",
    subtitle = "Área azul = F(8) = P(X ≤ 8)",
    x = "x"
  ) +
  scale_y_continuous(name = "Densidad",
                     sec.axis = sec_axis(~ . * (1/coef), name = "Probabilidad acumulada")) +
  theme_minimal() + 
  theme(
    plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
    plot.subtitle = element_text(hjust = 0.5, size = 12),
    axis.title = element_text(size = 12),
    axis.title.y = element_text(color = "#d62728"),
    axis.title.y.right = element_text(color = "#1f77b4"),
    legend.position = "right",
    panel.grid.minor = element_blank()
    )


print(p_relacion)

# Calcular el valor exacto
prob_exacta <- pchisq(8, df = n_ejemplo)
cat(paste("F(8; n=5) = P(X ≤ 8) =", round(prob_exacta, 4)))
```


## Medidas Descriptivas

### Media

La media de la distribución ji-cuadrada con n grados de libertad está dada por:

$$E(X) = \mu = n$$

Esta relación simple y directa indica que la media de la distribución ji-cuadrada es exactamente igual al número de grados de libertad. Esta propiedad surge naturalmente de su construcción como suma de $n$ variables aleatorias normales estándar elevadas al cuadrado, cada una con media 1.

```{r}
#| label: evolucion-media
#| echo: true
#| fig-cap: "Evolución de la media con los grados de libertad"

# Generar datos para el análisis de la media
n_rango <- 1:50
df_media <- data.frame(
  n = n_rango,
  media_teorica = n_rango,
  desv_estandar = sqrt(2 * n_rango)
)

# Gráfico de la media vs n
p_media <- ggplot(df_media, aes(x = n, y = media_teorica)) +
  geom_line(size = 1.5, color = "#2E86AB") +
  geom_point(size = 2, color = "#2E86AB", alpha = 0.7) +
  geom_abline(intercept = 0, slope = 1, linetype = "dashed", alpha = 0.6, color = "gray50") +
  labs(
    title = "Media de la Distribución Ji-cuadrada",
    subtitle = "E(X) = n (relación lineal perfecta)",
    x = "Grados de libertad (n)",
    y = "Media E(X)"
  ) +
  scale_x_continuous(breaks = seq(0, 50, 10)) +
  scale_y_continuous(breaks = seq(0, 50, 10)) +
  annotate("text", x = 40, y = 15, label = "E(X) = n", size = 5, color = "#2E86AB", fontface = "bold")+
  theme_minimal() + 
  theme(
    plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
    plot.subtitle = element_text(hjust = 0.5, size = 12),
    axis.title = element_text(size = 12),
    legend.position = "right",
    panel.grid.minor = element_blank()
    )

print(p_media)
```

**Visualización con distribuciones**

```{r}
#| label: media-distribuciones
#| echo: true
#| fig-cap: "Media teórica vs observada en las distribuciones"

# Mostrar cómo la media coincide con el centro de masa de las distribuciones
n_ejemplos <- c(3, 8, 15, 25)

p_distribuciones_media <- ggplot() +
  geom_function(fun = function(x) dchisq(x, df = 3), 
                aes(color = "n = 3"), size = 1.2, xlim = c(0, 40)) +
  geom_function(fun = function(x) dchisq(x, df = 8), 
                aes(color = "n = 8"), size = 1.2, xlim = c(0, 40)) +
  geom_function(fun = function(x) dchisq(x, df = 15), 
                aes(color = "n = 15"), size = 1.2, xlim = c(0, 40)) +
  geom_function(fun = function(x) dchisq(x, df = 25), 
                aes(color = "n = 25"), size = 1.2, xlim = c(0, 40)) +
  # Líneas verticales en las medias
  geom_vline(xintercept = 3, color = scales::pal_viridis()(4)[1], linetype = "dashed", alpha = 0.8) +
  geom_vline(xintercept = 8, color = scales::pal_viridis()(4)[2], linetype = "dashed", alpha = 0.8) +
  geom_vline(xintercept = 15, color = scales::pal_viridis()(4)[3], linetype = "dashed", alpha = 0.8) +
  geom_vline(xintercept = 25, color = scales::pal_viridis()(4)[4], linetype = "dashed", alpha = 0.8) +
  scale_color_viridis_d(
    name = "Grados de\nLibertad",
    limits = c("n = 3", "n = 8", "n = 15", "n = 25")
  ) +
  xlim(0, 40) + ylim(0, 0.15) +
  labs(
    title = "Localización de la Media en las Distribuciones",
    subtitle = "Las líneas discontinuas indican E(X) = n para cada distribución",
    x = "x", y = "f(x)") +
  theme_minimal() + 
  theme(
    plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
    plot.subtitle = element_text(hjust = 0.5, size = 12),
    axis.title = element_text(size = 12),
    legend.position = "right",
    panel.grid.minor = element_blank()
    )

print(p_distribuciones_media)
```


### Moda

La moda de la distribución ji-cuadrada depende del valor de los grados de libertad:

\begin{equation}
\text{Moda} = \begin{cases}
\text{No existe (supremo en } x = 0\text{)} & \text{si } n = 1 \\
0 & \text{si } n = 2 \\
n - 2 & \text{si } n > 2
\end{cases}
\end{equation}

Para $n > 2$, la moda se desplaza linealmente con los grados de libertad, manteniéndose siempre dos unidades por debajo de la media.

**Comportamiento por regiones**

La moda de la distribución ji-cuadrada presenta un comportamiento diferenciado según los grados de libertad:

- **n = 1**: No existe moda en sentido estricto (función monótonamente decreciente)
- **n = 2**: Moda en x = 0
- **n > 2**: Moda = n - 2 (relación lineal)

```{r}
#| label: evolucion-moda
#| echo: true
#| fig-cap: "Evolución de la moda con los grados de libertad"

# Calcular moda para diferentes valores de n
n_moda <- 1:30
df_moda <- data.frame(
  n = n_moda,
  moda = case_when(
    n_moda == 1 ~ NA_real_,  # No existe
    n_moda == 2 ~ 0,
    n_moda > 2 ~ n_moda - 2
  ),
  media = n_moda
)

# Gráfico de la evolución de la moda
p_moda_evolucion <- ggplot(df_moda, aes(x = n)) +
  geom_line(aes(y = moda, color = "Moda"), size = 1.5, na.rm = TRUE) +
  geom_point(aes(y = moda, color = "Moda"), size = 2.5, na.rm = TRUE) +
  geom_line(aes(y = media, color = "Media"), size = 1.2, alpha = 0.7) +
  geom_point(data = filter(df_moda, n == 2), aes(x = n, y = moda), 
             color = "firebrick", size = 4, shape = 17) +
  scale_color_manual(
    name = "Medida",
    values = c("Moda" = "#F28E2B", "Media" = "#4E79A7"),
    breaks = c("Moda", "Media")
  ) +
  scale_x_continuous(breaks = seq(0, 30, 5)) +
  scale_y_continuous(breaks = seq(0, 30, 5)) +
  labs(
    title = "Evolución de la Moda vs Media",
    subtitle = "Moda = n - 2 para n > 2; Moda = 0 para n = 2; No existe para n = 1",
    x = "Grados de libertad (n)",
    y = "Valor"
  ) +
  annotate("text", x = 25, y = 20, label = "Moda = n - 2", 
           color = "#F28E2B", size = 4, fontface = "bold") +
  annotate("text", x = 20, y = 25, label = "Media = n", 
           color = "#4E79A7", size = 4, fontface = "bold") +
  annotate("text", x = 6, y = 2, label = "n = 2:\nModa = 0", 
           color = "#F28E2B", size = 3.5, hjust = 0) +
  annotate("text", x = 1.5, y = 10, label = "n = 1:\nNo existe moda", 
           color = "red", size = 4, hjust = 0)+
  theme_minimal() + 
  theme(
    plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
    plot.subtitle = element_text(hjust = 0.5, size = 12),
    axis.title = element_text(size = 12),
    legend.position = "right",
    panel.grid.minor = element_blank()
    )

print(p_moda_evolucion)
```

**Visualización de modas en las distribuciones**

```{r}
#| label: moda-distribuciones
#| warning: false
#| fig-cap: "Visualización de las modas en las distribuciones ji-cuadrada"

# Casos especiales de la moda
n_casos_moda <- c(1, 2, 4, 8, 12)
colores_moda <- c("#E31A1C", "#1F78B4", "#33A02C", "#FF7F00", "#6A3D9A")

p_casos_moda <- ggplot() +
  geom_function(fun = function(x) dchisq(x, df = 1), 
                aes(color = "n = 1 (sin moda)"), size = 1.4, xlim = c(0, 20)) +
  geom_function(fun = function(x) dchisq(x, df = 2), 
                aes(color = "n = 2 (moda = 0)"), size = 1.4, xlim = c(0, 20)) +
  geom_function(fun = function(x) dchisq(x, df = 4), 
                aes(color = "n = 4 (moda = 2)"), size = 1.4, xlim = c(0, 20)) +
  geom_function(fun = function(x) dchisq(x, df = 8), 
                aes(color = "n = 8 (moda = 6)"), size = 1.4, xlim = c(0, 20)) +
  geom_function(fun = function(x) dchisq(x, df = 12), 
                aes(color = "n = 12 (moda = 10)"), size = 1.4, xlim = c(0, 20)) +
  # Puntos en las modas
  geom_point(aes(x = 0, y = dchisq(0, 2)), color = "#1F78B4", size = 4) +
  geom_point(aes(x = 2, y = dchisq(2, 4)), color = "#33A02C", size = 4) +
  geom_point(aes(x = 6, y = dchisq(6, 8)), color = "#FF7F00", size = 4) +
  geom_point(aes(x = 10, y = dchisq(10, 12)), color = "#6A3D9A", size = 4) +
  # Líneas verticales en las modas
  geom_vline(xintercept = c(0, 2, 6, 10), linetype = "dashed", alpha = 0.6) +
  scale_color_manual(
    name = "Casos",
    values = setNames(colores_moda, c("n = 1 (sin moda)", "n = 2 (moda = 0)", 
                                     "n = 4 (moda = 2)", "n = 8 (moda = 6)", 
                                     "n = 12 (moda = 10)")),
    breaks = c("n = 1 (sin moda)", "n = 2 (moda = 0)", "n = 4 (moda = 2)", 
               "n = 8 (moda = 6)", "n = 12 (moda = 10)")
  ) +
  xlim(0, 18) + ylim(0, 0.5) +
  labs(
    title = "Localización de las Modas en las Distribuciones",
    subtitle = "Los puntos grandes indican la posición de cada moda",
    x = "x", y = "f(x)"
  )+ 
  theme_minimal() +
  theme(
    plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
    plot.subtitle = element_text(hjust = 0.5, size = 12),
    axis.title = element_text(size = 12),
    legend.position = "right",
    panel.grid.minor = element_blank()
    )

print(p_casos_moda)
```



### Varianza

La varianza de la distribución ji-cuadrada está dada por:

$$\text{Var}(X) = \sigma^2 = 2n$$

La desviación estándar correspondiente es:

$$\sigma = \sqrt{2n}$$

Esta relación lineal entre la varianza y los grados de libertad indica que la dispersión de la distribución crece proporcionalmente con n.


**Comportamiento Teórico**

La varianza de la distribución ji-cuadrada presenta una relación lineal con los grados de libertad: $\text{Var}(X) = 2n$. Esta propiedad implica que la dispersión crece proporcionalmente con n, pero a una tasa del doble de la media.

```{r}
#| label: evolucion-varianza
#| echo: true
#| fig-cap: "Evolución de la varianza y desviación estándar"

# Análisis de la varianza y desviación estándar
n_var <- 1:50
df_varianza <- data.frame(
  n = n_var,
  varianza = 2 * n_var,
  desv_estandar = sqrt(2 * n_var),
  coef_variacion = sqrt(2 * n_var) / n_var  # CV = σ/μ
)

# Gráfico de varianza y desviación estándar
p_var_desv <- ggplot(df_varianza, aes(x = n)) +
  geom_line(aes(y = varianza, color = "Varianza"), size = 1.5) +
  geom_line(aes(y = desv_estandar, color = "Desviación Estándar"), size = 1.5) +
  geom_point(aes(y = varianza, color = "Varianza"), size = 2, alpha = 0.6) +
  geom_point(aes(y = desv_estandar, color = "Desviación Estándar"), size = 2, alpha = 0.6) +
  scale_color_manual(
    name = "Medida",
    values = c("Varianza" = "#E15759", "Desviación Estándar" = "#76B7B2"),
    breaks = c("Varianza", "Desviación Estándar")
  ) +
  scale_x_continuous(breaks = seq(0, 50, 10)) +
  labs(
    title = "Evolución de la Varianza y Desviación Estándar",
    subtitle = "Var(X) = 2n;  σ = √(2n)",
    x = "Grados de libertad (n)",
    y = "Valor"
  ) +
  annotate("text", x = 30, y = 80, label = "Var(X) = 2n", 
           color = "#E15759", size = 4.5, fontface = "bold") +
  annotate("text", x = 40, y = 15, label = "σ = √(2n)", 
           color = "#76B7B2", size = 4.5, fontface = "bold")+ 
  theme_minimal() +
  theme(
    plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
    plot.subtitle = element_text(hjust = 0.5, size = 12),
    axis.title = element_text(size = 12),
    legend.position = "right",
    panel.grid.minor = element_blank()
    )

print(p_var_desv)
```

### Coeficiente de Variación

El coeficiente de variación (CV) mide la dispersión relativa y está dado por:
$$CV = \frac{\sigma}{\mu} = \frac{\sqrt{2n}}{n} = \sqrt{\frac{2}{n}}$$

```{r}
#| label: coeficiente-variacion
#| echo: true
#| fig-cap: "Evolución del coeficiente de variación"

# Gráfico del coeficiente de variación
p_cv <- ggplot(df_varianza, aes(x = n, y = coef_variacion)) +
  geom_line(size = 1.5, color = "#AF7AA1") +
  geom_point(size = 2, color = "#AF7AA1", alpha = 0.7) +
  geom_hline(yintercept = c(0.5, 1, 1.5), linetype = "dashed", alpha = 0.5) +
  scale_x_continuous(breaks = seq(0, 50, 10)) +
  scale_y_continuous(breaks = seq(0, 2, 0.5)) +
  labs(
    title = "Coeficiente de Variación",
    subtitle = "CV = σ/μ = √(2/n) - Decrece con √n",
    x = "Grados de libertad (n)",
    y = "Coeficiente de Variación"
  ) +
  annotate("text", x = 45, y = 0.1, label = "CV → 0 cuando n → ∞", 
           color = "#AF7AA1", size = 3.5, fontface = "italic")+ 
  theme_minimal() +
  theme(
    plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
    plot.subtitle = element_text(hjust = 0.5, size = 12),
    axis.title = element_text(size = 12),
    legend.position = "right",
    panel.grid.minor = element_blank()
    )

print(p_cv)
```



## Ejercicios Propuestos

::: {#exr-simulaciones}

Genera muestras aleatorias de diferentes tamaños desde 100 hasta 10000 observaciones para las distribuciones ji-cuadrada con n = 5, 20 y 50 grados de libertad. En casa caso:

1. Genera una gráfica de convergencia de la media muestral hacia la media teórica a medida que aumenta el tamaño de la muestra.

2. Genera una gráfica de convergencia de la varianza muestral hacia la varianza teórica a medida que aumenta el tamaño de la muestra.

3. Para el tamaño de muestra más grande, genera un histograma de la muestra junto con la función de densidad teórica superpuesta.

```{r}
grados_libertad <- c(5, 20, 50)

tamanos <- seq(100, 10000, by = 100)
n_max <- max(tamanos)
colores <- c("#E69F00", "#56B4E9", "#009E73")

set.seed(2024)

resultados_convergencia <- list()

for(i in seq_along(grados_libertad)) {
  gl <- grados_libertad[i]
  
  muestra_completa <- rchisq(n_max, df = gl)
  
  medias_acum <- sapply(tamanos, function(n) mean(muestra_completa[1:n]))
  varianzas_acum <- sapply(tamanos, function(n) var(muestra_completa[1:n]))
  
  media_teorica <- gl
  varianza_teorica <- 2 * gl
  
  resultados_convergencia[[i]] <- tibble(
    tamano = tamanos,
    media_muestral = medias_acum,
    varianza_muestral = varianzas_acum,
    media_teorica = media_teorica,
    varianza_teorica = varianza_teorica,
    gl = gl,
    muestra_completa = list(muestra_completa)
  )
}

datos_convergencia <- bind_rows(resultados_convergencia)

cat("Parámetros teóricos de las distribuciones\n")
for(i in seq_along(grados_libertad)) {
  gl <- grados_libertad[i]
  cat("χ² con gl =", gl, ":\n")
  cat("  Media teórica (μ):", gl, "\n")
  cat("  Varianza teórica (σ²):", 2*gl, "\n")
  cat("  Desviación estándar teórica (σ):", round(sqrt(2*gl), 3), "\n\n")
}
```

```{r}
cat("Ejercicio 1\n")
p1 <- ggplot(datos_convergencia, aes(x = tamano, y = media_muestral, 
                                       color = factor(gl))) +
  geom_line(linewidth = 1.2) +
  geom_hline(data = datos_convergencia |> 
               distinct(gl, media_teorica),
             aes(yintercept = media_teorica, color = factor(gl)),
             linetype = "dashed", linewidth = 1) +
  scale_color_manual(values = colores,
                     name = "Grados de libertad",
                     labels = paste("gl =", grados_libertad)) +
  labs(title = "Convergencia de la Media Muestral hacia la Media Teórica",
       subtitle = "Ley de los Grandes Números para χ²",
       x = "Tamaño de muestra (n)",
       y = "Media muestral") +
  theme_bw() +
  theme(legend.position = "top",
        plot.title = element_text(face = "bold"))

p1
```

```{r}
cat("Ejercicio 2\n")
p2 <- ggplot(datos_convergencia, aes(x = tamano, y = varianza_muestral, 
                                       color = factor(gl))) +
  geom_line(linewidth = 1.2) +
  geom_hline(data = datos_convergencia |> 
               distinct(gl, varianza_teorica),
             aes(yintercept = varianza_teorica, color = factor(gl)),
             linetype = "dashed", linewidth = 1) +
  scale_color_manual(values = colores,
                     name = "Grados de libertad",
                     labels = paste("gl =", grados_libertad)) +
  labs(title = "Convergencia de la Varianza Muestral hacia la Varianza Teórica",
       subtitle = "Estabilización de la varianza con n grande",
       x = "Tamaño de muestra (n)",
       y = "Varianza muestral") +
  theme_bw() +
  theme(legend.position = "top",
        plot.title = element_text(face = "bold"))

p2

tabla_convergencia <- tibble(
  `Grados de libertad` = grados_libertad,
  `Media teórica` = grados_libertad,
  `Media muestral (n=10000)` = sapply(resultados_convergencia, 
                                       function(x) round(tail(x$media_muestral, 1), 4)),
  `Error media (%)` = round(
    (sapply(resultados_convergencia, function(x) tail(x$media_muestral, 1)) - grados_libertad) / 
      grados_libertad * 100, 3),
  `Varianza teórica` = 2 * grados_libertad,
  `Varianza muestral (n=10000)` = sapply(resultados_convergencia, 
                                          function(x) round(tail(x$varianza_muestral, 1), 4)),
  `Error varianza (%)` = round(
    (sapply(resultados_convergencia, function(x) tail(x$varianza_muestral, 1)) - 2*grados_libertad) / 
      (2*grados_libertad) * 100, 3)
)

kable(tabla_convergencia,
      caption = "Convergencia de Estadísticos para n = 10,000",
      align = "c") |>
  kable_styling(bootstrap_options = c("striped", "hover", "condensed"),
                full_width = FALSE)
```

```{r}
# 3.
cat("Ejercicio 3\n")
# gl = 5
muestra_5 <- resultados_convergencia[[1]]$muestra_completa[[1]]
dist_5 <- tibble(
  x = seq(0, max(muestra_5) + 5, length = 1000),
  densidad = dchisq(x, df = 5)
)

p3 <- ggplot() +
  geom_histogram(aes(muestra_5, y = after_stat(density)),
                 fill = colores[1], color = "white", bins = 50, alpha = 0.7) +
  geom_line(data = dist_5, aes(x, densidad),
            color = "darkred", linewidth = 1.3) +
  labs(title = "Distribución χ² con 5 grados de libertad",
       subtitle = paste("Muestra de n =", format(n_max, big.mark = ",")),
       x = "Valor", y = "Densidad") +
  theme_bw() +
  theme(plot.title = element_text(face = "bold"))

p3


# gl = 20
muestra_20 <- resultados_convergencia[[2]]$muestra_completa[[1]]
dist_20 <- tibble(
  x = seq(0, max(muestra_20) + 5, length = 1000),
  densidad = dchisq(x, df = 20)
)

p4 <- ggplot() +
  geom_histogram(aes(muestra_20, y = after_stat(density)),
                 fill = colores[2], color = "white", bins = 50, alpha = 0.7) +
  geom_line(data = dist_20, aes(x, densidad),
            color = "darkred", linewidth = 1.3) +
  labs(title = "Distribución χ² con 20 grados de libertad",
       subtitle = paste("Muestra de n =", format(n_max, big.mark = ",")),
       x = "Valor", y = "Densidad") +
  theme_bw() +
  theme(plot.title = element_text(face = "bold"))

p4


# gl = 50
muestra_50 <- resultados_convergencia[[3]]$muestra_completa[[1]]
dist_50 <- tibble(
  x = seq(0, max(muestra_50) + 5, length = 1000),
  densidad = dchisq(x, df = 50)
)

p5 <- ggplot() +
  geom_histogram(aes(muestra_50, y = after_stat(density)),
                 fill = colores[3], color = "white", bins = 50, alpha = 0.7) +
  geom_line(data = dist_50, aes(x, densidad),
            color = "darkred", linewidth = 1.3) +
  labs(title = "Distribución χ² con 50 grados de libertad",
       subtitle = paste("Muestra de n =", format(n_max, big.mark = ",")),
       x = "Valor", y = "Densidad") +
  theme_bw() +
  theme(plot.title = element_text(face = "bold"))

p5

```



:::


::: {#exr-tcl_ji}

Para diferentes tamaños de muestra verifica numéricamente el Teorema Central del Límite aplicado a la distribución ji-cuadrada, elige cualquier valor de los grados de libertad.

```{r}
gl <- 5
tamanos_muestra <- c(5, 10, 30, 50, 100)
n_simulaciones <- 10000

mu_chi <- gl
sigma_chi <- sqrt(2 * gl)

cat("Parámetros de la distribución χ²(", gl, ")\n", sep = "")
cat("Media (μ):", mu_chi, "\n")
cat("Desviación estándar (σ):", round(sigma_chi, 4), "\n")
cat("Varianza (σ²):", 2 * gl, "\n\n")


set.seed(2024)
resultados_tcl <- list()

for(i in seq_along(tamanos_muestra)) {
  n <- tamanos_muestra[i]
  
  medias_muestrales <- replicate(n_simulaciones, {
    muestra <- rchisq(n, df = gl)
    mean(muestra)
  })
  
  medias_estandarizadas <- (medias_muestrales - mu_chi) / (sigma_chi / sqrt(n))
  
  media_teorica_xbarra <- mu_chi
  sd_teorica_xbarra <- sigma_chi / sqrt(n)
  
  resultados_tcl[[i]] <- tibble(
    n = n,
    medias_muestrales = medias_muestrales,
    medias_estandarizadas = medias_estandarizadas,
    media_teorica_xbarra = media_teorica_xbarra,
    sd_teorica_xbarra = sd_teorica_xbarra
  )
  
  cat("Tamaño de muestra n =", n, "\n")
  cat("  Media de X̄:", round(mean(medias_muestrales), 4), 
      "(teórica:", media_teorica_xbarra, ")\n")
  cat("  Desv. Est. de X̄:", round(sd(medias_muestrales), 4), 
      "(teórica:", round(sd_teorica_xbarra, 4), ")\n")
  cat("  Media de Z:", round(mean(medias_estandarizadas), 4), "(teórica: 0)\n")
  cat("  Desv. Est. de Z:", round(sd(medias_estandarizadas), 4), "(teórica: 1)\n\n")
}


# Gráficos de histogramas con distribución teórica para X̄

# n = 5
datos_n5 <- resultados_tcl[[1]]
dist_n5 <- tibble(
  x = seq(min(datos_n5$medias_muestrales), max(datos_n5$medias_muestrales), length = 1000),
  densidad = dnorm(x, mean = mu_chi, sd = sigma_chi / sqrt(5))
)

p1 <- ggplot() +
  geom_histogram(aes(datos_n5$medias_muestrales, y = after_stat(density)),
                 fill = "#E69F00", color = "white", bins = 40, alpha = 0.7) +
  geom_line(data = dist_n5, aes(x, densidad),
            color = "darkred", linewidth = 1.3) +
  geom_vline(xintercept = mu_chi, linetype = "dashed", color = "blue", linewidth = 1) +
  labs(title = "Distribución con n = 5",
       x = "Media muestral (X̄)", y = "Densidad") +
  theme_bw()
p1

# n = 10
datos_n10 <- resultados_tcl[[2]]
dist_n10 <- tibble(
  x = seq(min(datos_n10$medias_muestrales), max(datos_n10$medias_muestrales), length = 1000),
  densidad = dnorm(x, mean = mu_chi, sd = sigma_chi / sqrt(10))
)

p2 <- ggplot() +
  geom_histogram(aes(datos_n10$medias_muestrales, y = after_stat(density)),
                 fill = "#56B4E9", color = "white", bins = 40, alpha = 0.7) +
  geom_line(data = dist_n10, aes(x, densidad),
            color = "darkred", linewidth = 1.3) +
  geom_vline(xintercept = mu_chi, linetype = "dashed", color = "blue", linewidth = 1) +
  labs(title = "Distribución con n = 10",
       x = "Media muestral (X̄)", y = "Densidad") +
  theme_bw()
p2

# n = 30
datos_n30 <- resultados_tcl[[3]]
dist_n30 <- tibble(
  x = seq(min(datos_n30$medias_muestrales), max(datos_n30$medias_muestrales), length = 1000),
  densidad = dnorm(x, mean = mu_chi, sd = sigma_chi / sqrt(30))
)

p3 <- ggplot() +
  geom_histogram(aes(datos_n30$medias_muestrales, y = after_stat(density)),
                 fill = "#009E73", color = "white", bins = 40, alpha = 0.7) +
  geom_line(data = dist_n30, aes(x, densidad),
            color = "darkred", linewidth = 1.3) +
  geom_vline(xintercept = mu_chi, linetype = "dashed", color = "blue", linewidth = 1) +
  labs(title = "Distribución con n = 30",
       x = "Media muestral (X̄)", y = "Densidad") +
  theme_bw()
p3

# n = 50
datos_n50 <- resultados_tcl[[4]]
dist_n50 <- tibble(
  x = seq(min(datos_n50$medias_muestrales), max(datos_n50$medias_muestrales), length = 1000),
  densidad = dnorm(x, mean = mu_chi, sd = sigma_chi / sqrt(50))
)

p4 <- ggplot() +
  geom_histogram(aes(datos_n50$medias_muestrales, y = after_stat(density)),
                 fill = "#F0E442", color = "white", bins = 40, alpha = 0.7) +
  geom_line(data = dist_n50, aes(x, densidad),
            color = "darkred", linewidth = 1.3) +
  geom_vline(xintercept = mu_chi, linetype = "dashed", color = "blue", linewidth = 1) +
  labs(title = "Distribución con n = 50",
       x = "Media muestral (X̄)", y = "Densidad") +
  theme_bw()
p4

# n = 100
datos_n100 <- resultados_tcl[[5]]
dist_n100 <- tibble(
  x = seq(min(datos_n100$medias_muestrales), max(datos_n100$medias_muestrales), length = 1000),
  densidad = dnorm(x, mean = mu_chi, sd = sigma_chi / sqrt(100))
)

p5 <- ggplot() +
  geom_histogram(aes(datos_n100$medias_muestrales, y = after_stat(density)),
                 fill = "#CC79A7", color = "white", bins = 40, alpha = 0.7) +
  geom_line(data = dist_n100, aes(x, densidad),
            color = "darkred", linewidth = 1.3) +
  geom_vline(xintercept = mu_chi, linetype = "dashed", color = "blue", linewidth = 1) +
  labs(title = "Distribución con n = 100",
       x = "Media muestral (X̄)", y = "Densidad") +
  theme_bw()
p5

# Gráficos de histogramas estandarizados (Z = (X̄ - μ)/(σ/√n))

# Distribución normal estándar para comparación
dist_normal_std <- tibble(
  z = seq(-4, 4, length = 1000),
  densidad = dnorm(z, mean = 0, sd = 1)
)

# n = 5 (estandarizado)
p6 <- ggplot() +
  geom_histogram(aes(datos_n5$medias_estandarizadas, y = after_stat(density)),
                 fill = "#E69F00", color = "white", bins = 40, alpha = 0.7) +
  geom_line(data = dist_normal_std, aes(z, densidad),
            color = "darkred", linewidth = 1.3) +
  geom_vline(xintercept = 0, linetype = "dashed", color = "blue", linewidth = 1) +
  labs(title = "Distribución Estandarizada con n = 5",
       subtitle = "Comparación con N(0, 1)",
       x = "Z = (X̄ - μ) / (σ/√n)", y = "Densidad") +
  xlim(-4, 4) +
  theme_bw()
p6

# n = 30 (estandarizado)
p7 <- ggplot() +
  geom_histogram(aes(datos_n30$medias_estandarizadas, y = after_stat(density)),
                 fill = "#009E73", color = "white", bins = 40, alpha = 0.7) +
  geom_line(data = dist_normal_std, aes(z, densidad),
            color = "darkred", linewidth = 1.3) +
  geom_vline(xintercept = 0, linetype = "dashed", color = "blue", linewidth = 1) +
  labs(title = "Distribución Estandarizada con n = 30",
       subtitle = "Comparación con N(0, 1)",
       x = "Z = (X̄ - μ) / (σ/√n)", y = "Densidad") +
  xlim(-4, 4) +
  theme_bw()
p7

# n = 100 (estandarizado)
p8 <- ggplot() +
  geom_histogram(aes(datos_n100$medias_estandarizadas, y = after_stat(density)),
                 fill = "#CC79A7", color = "white", bins = 40, alpha = 0.7) +
  geom_line(data = dist_normal_std, aes(z, densidad),
            color = "darkred", linewidth = 1.3) +
  geom_vline(xintercept = 0, linetype = "dashed", color = "blue", linewidth = 1) +
  labs(title = "Distribución Estandarizada con n = 100",
       subtitle = "Comparación con N(0, 1)",
       x = "Z = (X̄ - μ) / (σ/√n)", y = "Densidad") +
  xlim(-4, 4) +
  theme_bw()
p8




tabla_tcl <- tibble(
  `Tamaño n` = tamanos_muestra,
  `Media de X̄` = sapply(resultados_tcl, function(x) round(mean(x$medias_muestrales), 4)),
  `Media teórica` = mu_chi,
  `DE de X̄` = sapply(resultados_tcl, function(x) round(sd(x$medias_muestrales), 4)),
  `DE teórica (σ/√n)` = round(sigma_chi / sqrt(tamanos_muestra), 4),
  `Media de Z` = sapply(resultados_tcl, function(x) round(mean(x$medias_estandarizadas), 4)),
  `DE de Z` = sapply(resultados_tcl, function(x) round(sd(x$medias_estandarizadas), 4))
)

kable(tabla_tcl,
      caption = "Verificación Numérica del Teorema Central del Límite",
      align = "c") |>
  kable_styling(bootstrap_options = c("striped", "hover", "condensed"),
                full_width = FALSE) |>
  add_header_above(c(" " = 1, "Distribución de X̄" = 4, "Distribución de Z" = 2))
```


:::

::: {#exr-suma_normal_cuadrada}

Mediante simulaciones numéricas, verifica la propiedad de aditividad de la distribución ji-cuadrada sumando variables aleatorias normales estándar elevadas al cuadrado. Compara los resultados con la distribución ji-cuadrada teórica.

```{r}
grados_libertad <- c(3, 5, 10)
n_simulaciones <- 10000

set.seed(2024)
cat("Verificación de la Propiedad de Aditividad\n")
cat("Si Z₁, Z₂, ..., Zₙ ~ N(0,1) independientes\n")
cat("Entonces: Z₁² + Z₂² + ... + Zₙ² ~ χ²(n)\n\n")


resultados_aditividad <- list()

for(i in seq_along(grados_libertad)) {
  gl <- grados_libertad[i]
  
  chi_directa <- rchisq(n_simulaciones, df = gl)
  
  chi_suma <- replicate(n_simulaciones, {
    normales <- rnorm(gl, mean = 0, sd = 1)
    sum(normales^2)
  })
  
  resultados_aditividad[[i]] <- tibble(
    gl = gl,
    chi_directa = chi_directa,
    chi_suma = chi_suma
  )
  
  cat("Grados de libertad:", gl, "\n")
  cat("  χ² directa - Media:", round(mean(chi_directa), 4), 
      "| Varianza:", round(var(chi_directa), 4), "\n")
  cat("  Suma de Z² - Media:", round(mean(chi_suma), 4), 
      "| Varianza:", round(var(chi_suma), 4), "\n")
  cat("  Teórico    - Media:", gl, "| Varianza:", 2*gl, "\n\n")
}


# gl = 3
datos_gl3 <- resultados_aditividad[[1]]
dist_gl3 <- tibble(
  x = seq(0, max(c(datos_gl3$chi_directa, datos_gl3$chi_suma)), length = 1000),
  densidad = dchisq(x, df = 3)
)

p1 <- ggplot() +
  geom_histogram(aes(datos_gl3$chi_suma, y = after_stat(density)),
                 fill = "#E69F00", color = "white", bins = 50, alpha = 0.6) +
  geom_histogram(aes(datos_gl3$chi_directa, y = after_stat(density)),
                 fill = "#56B4E9", color = "white", bins = 50, alpha = 0.6) +
  geom_line(data = dist_gl3, aes(x, densidad),
            color = "darkred", linewidth = 1.5) +
  labs(title = "χ² con 3 grados de libertad",
       subtitle = "Naranja: Σ(Z²) | Azul: χ² directa | Línea roja: χ² teórica",
       x = "Valor", y = "Densidad") +
  theme_bw()

p1

# gl = 5
datos_gl5 <- resultados_aditividad[[2]]
dist_gl5 <- tibble(
  x = seq(0, max(c(datos_gl5$chi_directa, datos_gl5$chi_suma)), length = 1000),
  densidad = dchisq(x, df = 5)
)

p2 <- ggplot() +
  geom_histogram(aes(datos_gl5$chi_suma, y = after_stat(density)),
                 fill = "#E69F00", color = "white", bins = 50, alpha = 0.6) +
  geom_histogram(aes(datos_gl5$chi_directa, y = after_stat(density)),
                 fill = "#56B4E9", color = "white", bins = 50, alpha = 0.6) +
  geom_line(data = dist_gl5, aes(x, densidad),
            color = "darkred", linewidth = 1.5) +
  labs(title = "χ² con 5 grados de libertad",
       subtitle = "Naranja: Σ(Z²) | Azul: χ² directa | Línea roja: χ² teórica",
       x = "Valor", y = "Densidad") +
  theme_bw()

p2

# gl = 10
datos_gl10 <- resultados_aditividad[[3]]
dist_gl10 <- tibble(
  x = seq(0, max(c(datos_gl10$chi_directa, datos_gl10$chi_suma)), length = 1000),
  densidad = dchisq(x, df = 10)
)

p3 <- ggplot() +
  geom_histogram(aes(datos_gl10$chi_suma, y = after_stat(density)),
                 fill = "#E69F00", color = "white", bins = 50, alpha = 0.6) +
  geom_histogram(aes(datos_gl10$chi_directa, y = after_stat(density)),
                 fill = "#56B4E9", color = "white", bins = 50, alpha = 0.6) +
  geom_line(data = dist_gl10, aes(x, densidad),
            color = "darkred", linewidth = 1.5) +
  labs(title = "χ² con 10 grados de libertad",
       subtitle = "Naranja: Σ(Z²) | Azul: χ² directa | Línea roja: χ² teórica",
       x = "Valor", y = "Densidad") +
  theme_bw()

p3

# Gráficos de densidad superpuestos
datos_comparacion <- bind_rows(
  tibble(gl = "gl = 3", Método = "Σ(Z²)", valor = datos_gl3$chi_suma),
  tibble(gl = "gl = 3", Método = "χ² directa", valor = datos_gl3$chi_directa),
  tibble(gl = "gl = 5", Método = "Σ(Z²)", valor = datos_gl5$chi_suma),
  tibble(gl = "gl = 5", Método = "χ² directa", valor = datos_gl5$chi_directa),
  tibble(gl = "gl = 10", Método = "Σ(Z²)", valor = datos_gl10$chi_suma),
  tibble(gl = "gl = 10", Método = "χ² directa", valor = datos_gl10$chi_directa)
)

dist_teoricas <- tibble(
  gl = rep(c("gl = 3", "gl = 5", "gl = 10"), each = 1000),
  x = c(seq(0, 20, length = 1000), 
        seq(0, 25, length = 1000), 
        seq(0, 35, length = 1000)),
  densidad = c(dchisq(seq(0, 20, length = 1000), df = 3),
               dchisq(seq(0, 25, length = 1000), df = 5),
               dchisq(seq(0, 35, length = 1000), df = 10))
)

p4 <- ggplot(datos_comparacion, aes(x = valor, color = Método)) +
  geom_density(linewidth = 1.2, alpha = 0.7) +
  geom_line(data = dist_teoricas, aes(x = x, y = densidad),
            color = "black", linewidth = 1.3, linetype = "dashed", inherit.aes = FALSE) +
  facet_wrap(~gl, scales = "free") +
  scale_color_manual(values = c("Σ(Z²)" = "#E69F00", "χ² directa" = "#56B4E9")) +
  labs(title = "Comparación: Suma de Z² vs χ² Directa vs Teórica",
       subtitle = "Línea negra punteada: distribución teórica",
       x = "Valor", y = "Densidad") +
  theme_bw() +
  theme(legend.position = "top",
        strip.background = element_rect(fill = "lightblue"))

p4
```


:::

::: {#exr-aproximacion_normal}

Mediante simulaciones numéricas, verifica la aproximación normal de la distribución ji-cuadrada para diferentes valores de n (por ejemplo, n = 10, 30, 50, 100). Compara las distribuciones muestrales con la normal teórica.

```{r}
grados_libertad <- c(10, 30, 50, 100)
n_simulaciones <- 10000

set.seed(2024)
cat("Aproximación Normal de χ²\n")
cat("Para n grande: χ²(n) ≈ N(μ = n, σ² = 2n)\n\n")

resultados_aproximacion <- list()

for(i in seq_along(grados_libertad)) {
  gl <- grados_libertad[i]
  
  chi_muestra <- rchisq(n_simulaciones, df = gl)
  
  mu_aprox <- gl
  sigma_aprox <- sqrt(2 * gl)
  
  resultados_aproximacion[[i]] <- tibble(
    gl = gl,
    chi_muestra = chi_muestra,
    mu_aprox = mu_aprox,
    sigma_aprox = sigma_aprox
  )
  
  cat("Grados de libertad:", gl, "\n")
  cat("  χ² observada - Media:", round(mean(chi_muestra), 4), 
      "| DE:", round(sd(chi_muestra), 4), "\n")
  cat("  Normal teórica - Media:", mu_aprox, 
      "| DE:", round(sigma_aprox, 4), "\n\n")
}


# n = 10
datos_n10 <- resultados_aproximacion[[1]]
dist_chi_10 <- tibble(
  x = seq(0, max(datos_n10$chi_muestra), length = 1000),
  densidad_chi = dchisq(x, df = 10),
  densidad_normal = dnorm(x, mean = 10, sd = sqrt(20))
)

p1 <- ggplot() +
  geom_histogram(aes(datos_n10$chi_muestra, y = after_stat(density)),
                 fill = "#E69F00", color = "white", bins = 50, alpha = 0.7) +
  geom_line(data = dist_chi_10, aes(x, densidad_chi, color = "χ²(10)"),
            linewidth = 1.3) +
  geom_line(data = dist_chi_10, aes(x, densidad_normal, color = "N(10, 20)"),
            linewidth = 1.3, linetype = "dashed") +
  scale_color_manual(values = c("χ²(10)" = "darkred", "N(10, 20)" = "blue"),
                     name = "Distribución") +
  labs(title = "χ² con 10 grados de libertad",
       subtitle = "Comparación con aproximación normal",
       x = "Valor", y = "Densidad") +
  theme_bw() +
  theme(legend.position = "top")

p1

# n = 30
datos_n30 <- resultados_aproximacion[[2]]
dist_chi_30 <- tibble(
  x = seq(0, max(datos_n30$chi_muestra), length = 1000),
  densidad_chi = dchisq(x, df = 30),
  densidad_normal = dnorm(x, mean = 30, sd = sqrt(60))
)

p2 <- ggplot() +
  geom_histogram(aes(datos_n30$chi_muestra, y = after_stat(density)),
                 fill = "#56B4E9", color = "white", bins = 50, alpha = 0.7) +
  geom_line(data = dist_chi_30, aes(x, densidad_chi, color = "χ²(30)"),
            linewidth = 1.3) +
  geom_line(data = dist_chi_30, aes(x, densidad_normal, color = "N(30, 60)"),
            linewidth = 1.3, linetype = "dashed") +
  scale_color_manual(values = c("χ²(30)" = "darkred", "N(30, 60)" = "blue"),
                     name = "Distribución") +
  labs(title = "χ² con 30 grados de libertad",
       subtitle = "Comparación con aproximación normal",
       x = "Valor", y = "Densidad") +
  theme_bw() +
  theme(legend.position = "top")

p2

# n = 50
datos_n50 <- resultados_aproximacion[[3]]
dist_chi_50 <- tibble(
  x = seq(0, max(datos_n50$chi_muestra), length = 1000),
  densidad_chi = dchisq(x, df = 50),
  densidad_normal = dnorm(x, mean = 50, sd = sqrt(100))
)

p3 <- ggplot() +
  geom_histogram(aes(datos_n50$chi_muestra, y = after_stat(density)),
                 fill = "#009E73", color = "white", bins = 50, alpha = 0.7) +
  geom_line(data = dist_chi_50, aes(x, densidad_chi, color = "χ²(50)"),
            linewidth = 1.3) +
  geom_line(data = dist_chi_50, aes(x, densidad_normal, color = "N(50, 100)"),
            linewidth = 1.3, linetype = "dashed") +
  scale_color_manual(values = c("χ²(50)" = "darkred", "N(50, 100)" = "blue"),
                     name = "Distribución") +
  labs(title = "χ² con 50 grados de libertad",
       subtitle = "Comparación con aproximación normal",
       x = "Valor", y = "Densidad") +
  theme_bw() +
  theme(legend.position = "top")

p3

# n = 100
datos_n100 <- resultados_aproximacion[[4]]
dist_chi_100 <- tibble(
  x = seq(0, max(datos_n100$chi_muestra), length = 1000),
  densidad_chi = dchisq(x, df = 100),
  densidad_normal = dnorm(x, mean = 100, sd = sqrt(200))
)

p4 <- ggplot() +
  geom_histogram(aes(datos_n100$chi_muestra, y = after_stat(density)),
                 fill = "#CC79A7", color = "white", bins = 50, alpha = 0.7) +
  geom_line(data = dist_chi_100, aes(x, densidad_chi, color = "χ²(100)"),
            linewidth = 1.3) +
  geom_line(data = dist_chi_100, aes(x, densidad_normal, color = "N(100, 200)"),
            linewidth = 1.3, linetype = "dashed") +
  scale_color_manual(values = c("χ²(100)" = "darkred", "N(100, 200)" = "blue"),
                     name = "Distribución") +
  labs(title = "χ² con 100 grados de libertad",
       subtitle = "Comparación con aproximación normal",
       x = "Valor", y = "Densidad") +
  theme_bw() +
  theme(legend.position = "top")

p4


```


:::

::: {#exr-suma_ji}

Por medio de simulaciones numéricas, verifica la propiedad de aditividad de la distribución ji-cuadrada sumando dos variables aleatorias ji-cuadrada independientes. Compara los resultados con la distribución ji-cuadrada teórica.

```{r}
gl_1 <- c(3, 5, 10)
gl_2 <- c(2, 5, 8)
n_simulaciones <- 10000

set.seed(2024)
cat("Verificación de la Propiedad de Aditividad\n")
cat("Si X ~ χ²(n₁) y Y ~ χ²(n₂) independientes\n")
cat("Entonces: X + Y ~ χ²(n₁ + n₂)\n\n")

resultados_suma <- list()

for(i in seq_along(gl_1)) {
  n1 <- gl_1[i]
  n2 <- gl_2[i]
  n_total <- n1 + n2
  
  chi1 <- rchisq(n_simulaciones, df = n1)
  chi2 <- rchisq(n_simulaciones, df = n2)
  suma_chi <- chi1 + chi2
  chi_directa <- rchisq(n_simulaciones, df = n_total)
  
  resultados_suma[[i]] <- tibble(
    n1 = n1,
    n2 = n2,
    n_total = n_total,
    suma_chi = suma_chi,
    chi_directa = chi_directa
  )
  
  cat("χ²(", n1, ") + χ²(", n2, ") = χ²(", n_total, ")\n", sep = "")
  cat("  Suma - Media:", round(mean(suma_chi), 4), 
      "| Varianza:", round(var(suma_chi), 4), "\n")
  cat("  Directa - Media:", round(mean(chi_directa), 4), 
      "| Varianza:", round(var(chi_directa), 4), "\n")
  cat("  Teórico - Media:", n_total, "| Varianza:", 2*n_total, "\n\n")
}

# χ²(3) + χ²(2) = χ²(5)
datos_1 <- resultados_suma[[1]]
dist_1 <- tibble(
  x = seq(0, max(c(datos_1$suma_chi, datos_1$chi_directa)), length = 1000),
  densidad = dchisq(x, df = 5)
)

p1 <- ggplot() +
  geom_histogram(aes(datos_1$suma_chi, y = after_stat(density)),
                 fill = "#E69F00", color = "white", bins = 50, alpha = 0.6) +
  geom_histogram(aes(datos_1$chi_directa, y = after_stat(density)),
                 fill = "#56B4E9", color = "white", bins = 50, alpha = 0.6) +
  geom_line(data = dist_1, aes(x, densidad),
            color = "darkred", linewidth = 1.5) +
  labs(title = "χ²(3) + χ²(2) = χ²(5)",
       subtitle = "Naranja: Suma | Azul: χ² directa | Línea roja: χ²(5) teórica",
       x = "Valor", y = "Densidad") +
  theme_bw()
p1

# χ²(5) + χ²(5) = χ²(10)
datos_2 <- resultados_suma[[2]]
dist_2 <- tibble(
  x = seq(0, max(c(datos_2$suma_chi, datos_2$chi_directa)), length = 1000),
  densidad = dchisq(x, df = 10)
)

p2 <- ggplot() +
  geom_histogram(aes(datos_2$suma_chi, y = after_stat(density)),
                 fill = "#E69F00", color = "white", bins = 50, alpha = 0.6) +
  geom_histogram(aes(datos_2$chi_directa, y = after_stat(density)),
                 fill = "#56B4E9", color = "white", bins = 50, alpha = 0.6) +
  geom_line(data = dist_2, aes(x, densidad),
            color = "darkred", linewidth = 1.5) +
  labs(title = "χ²(5) + χ²(5) = χ²(10)",
       subtitle = "Naranja: Suma | Azul: χ² directa | Línea roja: χ²(10) teórica",
       x = "Valor", y = "Densidad") +
  theme_bw()
p2

# χ²(10) + χ²(8) = χ²(18)
datos_3 <- resultados_suma[[3]]
dist_3 <- tibble(
  x = seq(0, max(c(datos_3$suma_chi, datos_3$chi_directa)), length = 1000),
  densidad = dchisq(x, df = 18)
)

p3 <- ggplot() +
  geom_histogram(aes(datos_3$suma_chi, y = after_stat(density)),
                 fill = "#E69F00", color = "white", bins = 50, alpha = 0.6) +
  geom_histogram(aes(datos_3$chi_directa, y = after_stat(density)),
                 fill = "#56B4E9", color = "white", bins = 50, alpha = 0.6) +
  geom_line(data = dist_3, aes(x, densidad),
            color = "darkred", linewidth = 1.5) +
  labs(title = "χ²(10) + χ²(8) = χ²(18)",
       subtitle = "Naranja: Suma | Azul: χ² directa | Línea roja: χ²(18) teórica",
       x = "Valor", y = "Densidad") +
  theme_bw()
p3
```
:::

